"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9919],{7114:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"sdks/python/v1.0.0/grpc_feature_client","title":"GRPC Feature client","description":"PyPI version","source":"@site/docs/sdks/python/v1.0.0/grpc_feature_client.md","sourceDirName":"sdks/python/v1.0.0","slug":"/sdks/python/v1.0.0/grpc_feature_client","permalink":"/BharatMLStack/sdks/python/v1.0.0/grpc_feature_client","draft":false,"unlisted":false,"editUrl":"https://github.com/Meesho/BharatMLStack/tree/main/docs/docs/sdks/python/v1.0.0/grpc_feature_client.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"GRPC Feature client","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"v1.0.0","permalink":"/BharatMLStack/category/v100"},"next":{"title":"Spark client","permalink":"/BharatMLStack/sdks/python/v1.0.0/spark_feature_push_client"}}');var i=t(4848),r=t(8453);const a={title:"GRPC Feature client",sidebar_position:1},l="GRPC Feature Client",c={},o=[{value:"Installation",id:"installation",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Features",id:"features",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"GRPCFeatureClient",id:"grpcfeatureclient",level:3},{value:"GRPCClientConfig",id:"grpcclientconfig",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Persisting Features",id:"persisting-features",level:3},{value:"Retrieving Features",id:"retrieving-features",level:3},{value:"With Context Management",id:"with-context-management",level:3},{value:"When to Use",id:"when-to-use",level:2},{value:"Related Packages",id:"related-packages",level:2},{value:"Contributing",id:"contributing",level:2},{value:"Community &amp; Support",id:"community--support",level:2},{value:"License",id:"license",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"grpc-feature-client",children:"GRPC Feature Client"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://badge.fury.io/py/grpc_feature_client",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/pypi/v/grpc_feature_client?label=pypi-package&color=light%20green",alt:"PyPI version"})}),"\n",(0,i.jsx)(n.a,{href:"https://github.com/Meesho/BharatMLStack/actions/workflows/py-sdk.yml",children:(0,i.jsx)(n.img,{src:"https://github.com/Meesho/BharatMLStack/actions/workflows/py-sdk.yml/badge.svg",alt:"Build Status"})}),"\n",(0,i.jsx)(n.a,{href:"https://www.python.org/downloads/",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/python-3.7+-blue.svg",alt:"Python 3.7+"})}),"\n",(0,i.jsx)(n.a,{href:"https://discord.gg/XkT7XsV2AU",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/Discord-Join%20Chat-7289da?style=flat&logo=discord&logoColor=white",alt:"Discord"})}),"\n",(0,i.jsx)(n.a,{href:"https://github.com/Meesho/BharatMLStack/blob/main/LICENSE.md",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/License-BharatMLStack%20BSL%201.1-blue.svg",alt:"License"})})]}),"\n",(0,i.jsx)(n.p,{children:"High-performance gRPC client for BharatML Stack real-time feature operations with direct API access."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip install grpc_feature_client\n"})}),"\n",(0,i.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,i.jsx)(n.p,{children:"This package depends on:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://pypi.org/project/bharatml_commons/",children:"bharatml_commons"})}),": Common utilities and protobuf definitions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"grpcio>=1.50.0"}),": gRPC framework"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"grpcio-tools>=1.50.0"}),": gRPC tools for protobuf"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Direct gRPC API"}),": persist, retrieve, retrieveDecoded operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Go SDK Compatible"}),": Same authentication and API semantics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Batch Processing"}),": Automatic batching with parallel execution"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Real-time Focus"}),": Low-latency feature persistence and retrieval"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context Management"}),": Timeout and metadata handling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Connection Pooling"}),": Efficient connection management"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from grpc_feature_client import GRPCFeatureClient, GRPCClientConfig\n\n# Configure for real-time operations\nconfig = GRPCClientConfig(\n    server_address="localhost:50051",\n    job_id="realtime-service",\n    job_token="api-token"\n)\n\nclient = GRPCFeatureClient(config)\n\n# Direct API operations\nresult = client.persist_features(entity_label, keys_schema, feature_groups, data)\nfeatures = client.retrieve_decoded_features(entity_label, feature_groups, keys, entity_keys)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(n.h3,{id:"grpcfeatureclient",children:"GRPCFeatureClient"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class GRPCFeatureClient:\n    def __init__(self, config: GRPCClientConfig)\n    \n    def persist_features(\n        self,\n        entity_label: str,\n        keys_schema: List[str],\n        feature_group_schemas: List[Dict[str, Any]],\n        data_rows: List[Dict[str, Any]],\n        timeout: Optional[float] = None\n    ) -> Dict[str, Any]\n    \n    def retrieve_features(\n        self,\n        entity_label: str,\n        feature_groups: List[Dict[str, Any]],\n        keys_schema: List[str],\n        entity_keys: List[List[str]],\n        timeout: Optional[float] = None\n    ) -> Dict[str, Any]\n    \n    def retrieve_decoded_features(\n        self,\n        entity_label: str,\n        feature_groups: List[Dict[str, Any]],\n        keys_schema: List[str],\n        entity_keys: List[List[str]],\n        timeout: Optional[float] = None\n    ) -> Dict[str, Any]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"grpcclientconfig",children:"GRPCClientConfig"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class GRPCClientConfig:\n    def __init__(\n        self,\n        server_address: str,\n        job_id: str,\n        job_token: str,\n        use_tls: bool = False,\n        timeout_seconds: float = 30.0,\n        metadata: Dict[str, str] = None,\n        max_receive_message_length: int = 4 * 1024 * 1024,\n        max_send_message_length: int = 4 * 1024 * 1024\n    )\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,i.jsx)(n.h3,{id:"persisting-features",children:"Persisting Features"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from grpc_feature_client import GRPCFeatureClient, GRPCClientConfig\n\nconfig = GRPCClientConfig(\n    server_address="feature-store.example.com:50051",\n    job_id="model-inference-service",\n    job_token="api-token"\n)\n\nclient = GRPCFeatureClient(config)\n\n# Persist real-time features\nresult = client.persist_features(\n    entity_label="user_interaction",\n    keys_schema=["user_id", "session_id"],\n    feature_group_schemas=[{\n        "label": "realtime_features",\n        "feature_labels": ["click_count", "page_views"]\n    }],\n    data_rows=[{\n        "user_id": "u123",\n        "session_id": "s456",\n        "click_count": 5,\n        "page_views": 3\n    }]\n)\n\nprint(f"Persist result: {result}")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"retrieving-features",children:"Retrieving Features"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Retrieve features for ML model inference\nfeatures = client.retrieve_decoded_features(\n    entity_label="user_interaction",\n    feature_groups=[{\n        "label": "user_features",\n        "feature_labels": ["age", "location"]\n    }],\n    keys_schema=["user_id"],\n    entity_keys=[["u123"], ["u456"]]\n)\n\nprint(f"Retrieved features: {features}")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"with-context-management",children:"With Context Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Use client with automatic cleanup\nwith GRPCFeatureClient(config) as client:\n    result = client.persist_features(...)\n    features = client.retrieve_decoded_features(...)\n# Connection automatically closed\n"})}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use grpc_feature_client for:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\ud83d\ude80 ",(0,i.jsx)(n.strong,{children:"Real-time Operations"}),": Direct persist/retrieve operations"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udd0d ",(0,i.jsx)(n.strong,{children:"Interactive Queries"}),": Low-latency feature lookups"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83c\udfaf ",(0,i.jsx)(n.strong,{children:"API Integration"}),": Service-to-service communication"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udca8 ",(0,i.jsx)(n.strong,{children:"Single Records"}),": Persisting individual feature records"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,i.jsx)(n.strong,{children:"Model Serving"}),": Feature retrieval for online inference"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use spark_feature_push_client for:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,i.jsx)(n.strong,{children:"Batch ETL Pipelines"}),": Scheduled feature computation and publishing"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udcca ",(0,i.jsx)(n.strong,{children:"Historical Data Backfill"}),": Loading historical features into online store"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83c\udfd7\ufe0f ",(0,i.jsx)(n.strong,{children:"Data Engineering"}),": Spark-based feature transformations"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udcc8 ",(0,i.jsx)(n.strong,{children:"Large Scale Processing"}),": Processing millions of records efficiently"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-packages",children:"Related Packages"}),"\n",(0,i.jsx)(n.p,{children:"This package is part of the BharatML Stack ecosystem:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://pypi.org/project/bharatml_commons/",children:"bharatml_commons"})}),": Common utilities and protobuf definitions (required dependency)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://pypi.org/project/spark_feature_push_client/",children:"spark_feature_push_client"})}),": Spark-based data pipeline client"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,i.jsxs)(n.p,{children:["We welcome contributions from the community! Please see our ",(0,i.jsx)(n.a,{href:"https://github.com/Meesho/BharatMLStack/blob/main/CONTRIBUTING.md",children:"Contributing Guide"})," for details on how to get started."]}),"\n",(0,i.jsx)(n.h2,{id:"community--support",children:"Community & Support"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\ud83d\udcac ",(0,i.jsx)(n.strong,{children:"Discord"}),": Join our ",(0,i.jsx)(n.a,{href:"https://discord.gg/XkT7XsV2AU",children:"community chat"})]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udc1b ",(0,i.jsx)(n.strong,{children:"Issues"}),": Report bugs and request features on ",(0,i.jsx)(n.a,{href:"https://github.com/Meesho/BharatMLStack/issues",children:"GitHub Issues"})]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udce7 ",(0,i.jsx)(n.strong,{children:"Email"}),": Contact us at ",(0,i.jsx)(n.a,{href:"mailto:ml-oss@meesho.com",children:"ml-oss@meesho.com"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,i.jsxs)(n.p,{children:["BharatMLStack is open-source software licensed under the ",(0,i.jsx)(n.a,{href:"https://github.com/Meesho/BharatMLStack/blob/main/LICENSE.md",children:"BharatMLStack Business Source License 1.1"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("div",{align:"center",children:(0,i.jsx)("strong",{children:"Built with \u2764\ufe0f for the ML community from Meesho"})}),"\n",(0,i.jsx)("div",{align:"center",children:(0,i.jsx)("strong",{children:"If you find this useful, \u2b50\ufe0f the repo \u2014 your support means the world to us!"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);