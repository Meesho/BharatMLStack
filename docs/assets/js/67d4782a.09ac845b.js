"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8588],{8453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>l});var s=n(6540);const o={},i=s.createContext(o);function t(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(i.Provider,{value:r},e.children)}},8769:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"online-feature-store/v1.0.0/benchmarks","title":"Benchmarks","description":"Summary","source":"@site/docs/online-feature-store/v1.0.0/benchmarks.md","sourceDirName":"online-feature-store/v1.0.0","slug":"/online-feature-store/v1.0.0/benchmarks","permalink":"/BharatMLStack/online-feature-store/v1.0.0/benchmarks","draft":false,"unlisted":false,"editUrl":"https://github.com/Meesho/BharatMLStack/tree/main/docs/docs/online-feature-store/v1.0.0/benchmarks.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Benchmarks","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Data Formats","permalink":"/BharatMLStack/online-feature-store/v1.0.0/data-formats"},"next":{"title":"Key Functionalities","permalink":"/BharatMLStack/online-feature-store/v1.0.0/functionalities"}}');var o=n(4848),i=n(8453);const t={title:"Benchmarks",sidebar_position:3},l="Serialization Performance Benchmarks",a={},c=[{value:"Summary",id:"summary",level:2},{value:"Test Methodology",id:"test-methodology",level:2},{value:"Environment",id:"environment",level:3},{value:"Test Data",id:"test-data",level:3},{value:"Performance Results",id:"performance-results",level:2},{value:"Serialization Speed (Lower is Better)",id:"serialization-speed-lower-is-better",level:3},{value:"Serialized Size (Lower is Better)",id:"serialized-size-lower-is-better",level:3},{value:"Memory Efficiency (Lower is Better)",id:"memory-efficiency-lower-is-better",level:3},{value:"Throughput (Higher is Better)",id:"throughput-higher-is-better",level:3},{value:"Detailed Analysis",id:"detailed-analysis",level:2},{value:"PSDB Advantages",id:"psdb-advantages",level:3},{value:"Protocol Buffers Analysis",id:"protocol-buffers-analysis",level:3},{value:"Apache Arrow Analysis",id:"apache-arrow-analysis",level:3},{value:"Scaling Characteristics",id:"scaling-characteristics",level:2},{value:"Small Datasets (100-1,000 features)",id:"small-datasets-100-1000-features",level:3},{value:"Large Datasets (10,000+ features)",id:"large-datasets-10000-features",level:3},{value:"Technical Implementation Notes",id:"technical-implementation-notes",level:2},{value:"PSDB Optimizations",id:"psdb-optimizations",level:3},{value:"Memory Layout Comparison",id:"memory-layout-comparison",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"<strong>PSDB: Best for Small-Medium Scale (\u22641,000 features)</strong>",id:"psdb-best-for-small-medium-scale-1000-features",level:3},{value:"<strong>Apache Arrow: Best for Large Scale (\u226510,000 features)</strong>",id:"apache-arrow-best-for-large-scale-10000-features",level:3},{value:"<strong>Protocol Buffers: Balanced Middle Ground</strong>",id:"protocol-buffers-balanced-middle-ground",level:3},{value:"Raw Benchmark Output [Uncompressed Data]",id:"raw-benchmark-output-uncompressed-data",level:2}];function d(e){const r={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"serialization-performance-benchmarks",children:"Serialization Performance Benchmarks"})}),"\n",(0,o.jsx)(r.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsx)(r.p,{children:"This report presents comprehensive benchmark results comparing three serialization formats for the BharatML Online Feature Store:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"PSDB (Permanent Storage Data Block)"})," - Our custom format"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Protocol Buffers v3"})," - Google's binary serialization"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Apache Arrow"})," - Columnar in-memory analytics format"]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Key Findings:"})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["\ud83c\udfc6 ",(0,o.jsx)(r.strong,{children:"PSDB excels at small-to-medium scales"})," (100-1,000 features)"]}),"\n",(0,o.jsxs)(r.li,{children:["\u26a1 ",(0,o.jsx)(r.strong,{children:"35% faster"})," than Proto3, but ",(0,o.jsx)(r.strong,{children:"67% slower"})," than Arrow (for 100k features)"]}),"\n",(0,o.jsxs)(r.li,{children:["\ud83d\udce6 ",(0,o.jsx)(r.strong,{children:"18% smaller"})," than Proto3, comparable to Arrow"]}),"\n",(0,o.jsxs)(r.li,{children:["\ud83e\udde0 ",(0,o.jsx)(r.strong,{children:"93% fewer allocations"})," than Arrow (4 vs 66 allocs/op)"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"test-methodology",children:"Test Methodology"}),"\n",(0,o.jsx)(r.h3,{id:"environment",children:"Environment"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Platform"}),": macOS ARM64 (Apple Silicon)"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Go Version"}),": 1.22.12"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Test Date"}),": January 2025"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Compression"}),": Disabled for fair comparison (",(0,o.jsx)(r.code,{children:"compression.TypeNone"}),")"]}),"\n"]}),"\n",(0,o.jsx)(r.h3,{id:"test-data",children:"Test Data"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Data Type"}),": Int32 arrays"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Feature Group Sizes"}),": 100, 1,000, 10,000, 100,000 features"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Test Iterations"}),": Variable (Go benchmark auto-scaling)"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Pool Optimization"}),": PSDB uses object pooling for memory efficiency"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"performance-results",children:"Performance Results"}),"\n",(0,o.jsx)(r.h3,{id:"serialization-speed-lower-is-better",children:"Serialization Speed (Lower is Better)"}),"\n",(0,o.jsxs)(r.table,{children:[(0,o.jsx)(r.thead,{children:(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.th,{children:"Feature Count"}),(0,o.jsx)(r.th,{children:"PSDB (ns/op)"}),(0,o.jsx)(r.th,{children:"Proto3 (ns/op)"}),(0,o.jsx)(r.th,{children:"Arrow (ns/op)"}),(0,o.jsx)(r.th,{children:"PSDB vs Proto3"}),(0,o.jsx)(r.th,{children:"PSDB vs Arrow"})]})}),(0,o.jsxs)(r.tbody,{children:[(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"100"}),(0,o.jsx)(r.td,{children:"625"}),(0,o.jsx)(r.td,{children:"696"}),(0,o.jsx)(r.td,{children:"3,831"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"10% faster"})}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"84% faster"})})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"1,000"}),(0,o.jsx)(r.td,{children:"4,056"}),(0,o.jsx)(r.td,{children:"6,004"}),(0,o.jsx)(r.td,{children:"5,191"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"32% faster"})}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"22% faster"})})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"10,000"}),(0,o.jsx)(r.td,{children:"37,357"}),(0,o.jsx)(r.td,{children:"57,674"}),(0,o.jsx)(r.td,{children:"23,173"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"35% faster"})}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"38% slower"})})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"100,000"}),(0,o.jsx)(r.td,{children:"359,932"}),(0,o.jsx)(r.td,{children:"556,541"}),(0,o.jsx)(r.td,{children:"118,489"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"35% faster"})}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"67% slower"})})]})]})]}),"\n",(0,o.jsx)(r.h3,{id:"serialized-size-lower-is-better",children:"Serialized Size (Lower is Better)"}),"\n",(0,o.jsxs)(r.table,{children:[(0,o.jsx)(r.thead,{children:(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.th,{children:"Feature Count"}),(0,o.jsx)(r.th,{children:"Raw Size (bytes)"}),(0,o.jsx)(r.th,{children:"PSDB (bytes)"}),(0,o.jsx)(r.th,{children:"Proto3 (bytes)"}),(0,o.jsx)(r.th,{children:"Arrow (bytes)"}),(0,o.jsx)(r.th,{children:"PSDB Ratio"}),(0,o.jsx)(r.th,{children:"Proto3 Ratio"}),(0,o.jsx)(r.th,{children:"Arrow Ratio"})]})}),(0,o.jsxs)(r.tbody,{children:[(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"100"}),(0,o.jsx)(r.td,{children:"400"}),(0,o.jsx)(r.td,{children:"409"}),(0,o.jsx)(r.td,{children:"490"}),(0,o.jsx)(r.td,{children:"680"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"102.2%"})}),(0,o.jsx)(r.td,{children:"122.5%"}),(0,o.jsx)(r.td,{children:"170.0%"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"1,000"}),(0,o.jsx)(r.td,{children:"4,000"}),(0,o.jsx)(r.td,{children:"4,009"}),(0,o.jsx)(r.td,{children:"4,881"}),(0,o.jsx)(r.td,{children:"4,280"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"100.2%"})}),(0,o.jsx)(r.td,{children:"122.0%"}),(0,o.jsx)(r.td,{children:"107.0%"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"10,000"}),(0,o.jsx)(r.td,{children:"40,000"}),(0,o.jsx)(r.td,{children:"40,009"}),(0,o.jsx)(r.td,{children:"48,717"}),(0,o.jsx)(r.td,{children:"40,280"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"100.0%"})}),(0,o.jsx)(r.td,{children:"121.8%"}),(0,o.jsx)(r.td,{children:"100.7%"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"100,000"}),(0,o.jsx)(r.td,{children:"400,000"}),(0,o.jsx)(r.td,{children:"400,009"}),(0,o.jsx)(r.td,{children:"487,225"}),(0,o.jsx)(r.td,{children:"400,280"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"100.0%"})}),(0,o.jsx)(r.td,{children:"121.8%"}),(0,o.jsx)(r.td,{children:"100.1%"})]})]})]}),"\n",(0,o.jsx)(r.h3,{id:"memory-efficiency-lower-is-better",children:"Memory Efficiency (Lower is Better)"}),"\n",(0,o.jsxs)(r.table,{children:[(0,o.jsx)(r.thead,{children:(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.th,{children:"Feature Count"}),(0,o.jsx)(r.th,{children:"PSDB (B/op)"}),(0,o.jsx)(r.th,{children:"Proto3 (B/op)"}),(0,o.jsx)(r.th,{children:"Arrow (B/op)"}),(0,o.jsx)(r.th,{children:"PSDB (allocs/op)"}),(0,o.jsx)(r.th,{children:"Proto3 (allocs/op)"}),(0,o.jsx)(r.th,{children:"Arrow (allocs/op)"})]})}),(0,o.jsxs)(r.tbody,{children:[(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"100"}),(0,o.jsx)(r.td,{children:"461"}),(0,o.jsx)(r.td,{children:"768"}),(0,o.jsx)(r.td,{children:"7,032"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"4"})}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"2"})}),(0,o.jsx)(r.td,{children:"66"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"1,000"}),(0,o.jsx)(r.td,{children:"4,143"}),(0,o.jsx)(r.td,{children:"5,632"}),(0,o.jsx)(r.td,{children:"15,544"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"4"})}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"2"})}),(0,o.jsx)(r.td,{children:"66"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"10,000"}),(0,o.jsx)(r.td,{children:"41,029"}),(0,o.jsx)(r.td,{children:"49,408"}),(0,o.jsx)(r.td,{children:"122,617"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"4"})}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"2"})}),(0,o.jsx)(r.td,{children:"66"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"100,000"}),(0,o.jsx)(r.td,{children:"401,814"}),(0,o.jsx)(r.td,{children:"491,776"}),(0,o.jsx)(r.td,{children:"957,948"}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"4"})}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"2"})}),(0,o.jsx)(r.td,{children:"66"})]})]})]}),"\n",(0,o.jsx)(r.h3,{id:"throughput-higher-is-better",children:"Throughput (Higher is Better)"}),"\n",(0,o.jsxs)(r.table,{children:[(0,o.jsx)(r.thead,{children:(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.th,{children:"Format"}),(0,o.jsx)(r.th,{children:"Throughput (MB/s)"}),(0,o.jsx)(r.th,{children:"Relative Performance"})]})}),(0,o.jsxs)(r.tbody,{children:[(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"PSDB"})}),(0,o.jsx)(r.td,{children:(0,o.jsx)(r.strong,{children:"975.31"})}),(0,o.jsx)(r.td,{children:"Baseline (100%)"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"Proto3"}),(0,o.jsx)(r.td,{children:"666.12"}),(0,o.jsx)(r.td,{children:"68% of PSDB"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"Arrow"}),(0,o.jsx)(r.td,{children:"768.25"}),(0,o.jsx)(r.td,{children:"79% of PSDB"})]})]})]}),"\n",(0,o.jsx)(r.h2,{id:"detailed-analysis",children:"Detailed Analysis"}),"\n",(0,o.jsx)(r.h3,{id:"psdb-advantages",children:"PSDB Advantages"}),"\n",(0,o.jsxs)(r.ol,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Minimal Overhead"}),": Only 9-byte header + raw data"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Optimal Packing"}),": No padding or metadata bloat"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Memory Pooling"}),": Reuses objects to minimize allocations"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Native Optimization"}),": Designed specifically for feature store use cases"]}),"\n"]}),"\n",(0,o.jsx)(r.h3,{id:"protocol-buffers-analysis",children:"Protocol Buffers Analysis"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Consistent Overhead"}),": ~22% size penalty across all scales"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Moderate Speed"}),": Reasonable serialization performance"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Low Allocations"}),": Only 2 allocations per operation"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Varint Encoding"}),": Efficient for smaller integers"]}),"\n"]}),"\n",(0,o.jsx)(r.h3,{id:"apache-arrow-analysis",children:"Apache Arrow Analysis"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"High Setup Cost"}),": Complex object creation (66 allocations)"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Good Large-Scale"}),": Better relative performance with more data"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Size Efficient"}),": Approaches raw data size for large datasets"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Memory Intensive"}),": Significant memory overhead per operation"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"scaling-characteristics",children:"Scaling Characteristics"}),"\n",(0,o.jsx)(r.h3,{id:"small-datasets-100-1000-features",children:"Small Datasets (100-1,000 features)"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"PSDB"}),": Consistent low overhead"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Proto3"}),": Moderate overhead, stable performance"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Arrow"}),": High setup cost dominates"]}),"\n"]}),"\n",(0,o.jsx)(r.h3,{id:"large-datasets-10000-features",children:"Large Datasets (10,000+ features)"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"PSDB"}),": Linear scaling, maintains efficiency"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Proto3"}),": Good scaling but with consistent 22% size penalty"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Arrow"}),": Better amortization of setup costs"]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"technical-implementation-notes",children:"Technical Implementation Notes"}),"\n",(0,o.jsx)(r.h3,{id:"psdb-optimizations",children:"PSDB Optimizations"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-go",children:"// Object pooling for zero allocations\nvar psdbPool = GetPSDBPool()\n\n// Direct buffer allocation\nheaderSize := PSDBLayout1LengthBytes  // 9 bytes\ndataSize := len(data) * 4            // 4 bytes per int32\n\n// No compression for maximum speed\ncompressionType = compression.TypeNone\n"})}),"\n",(0,o.jsx)(r.h3,{id:"memory-layout-comparison",children:"Memory Layout Comparison"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"PSDB Layout:    [9-byte header][raw data]\nProto3 Layout:  [varint lengths][encoded data][padding]\nArrow Layout:   [schema][metadata][buffers][padding]\n"})}),"\n",(0,o.jsx)(r.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"The optimal format depends on your use case and scale"}),":"]}),"\n",(0,o.jsx)(r.h3,{id:"psdb-best-for-small-medium-scale-1000-features",children:(0,o.jsx)(r.strong,{children:"PSDB: Best for Small-Medium Scale (\u22641,000 features)"})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Excellent speed"}),": Up to 83% faster than Arrow for small datasets"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Optimal size efficiency"}),": Closest to raw data size (100.0-102.2%)"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Memory efficiency"}),": Only 4 allocations per operation"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Low overhead"}),": Minimal 9-byte header"]}),"\n"]}),"\n",(0,o.jsx)(r.h3,{id:"apache-arrow-best-for-large-scale-10000-features",children:(0,o.jsx)(r.strong,{children:"Apache Arrow: Best for Large Scale (\u226510,000 features)"})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Superior large-scale performance"}),": 67% faster than PSDB at 100k features"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Efficient scaling"}),": Better amortization of setup costs"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Size competitive"}),": Approaches raw data size for large datasets"]}),"\n"]}),"\n",(0,o.jsx)(r.h3,{id:"protocol-buffers-balanced-middle-ground",children:(0,o.jsx)(r.strong,{children:"Protocol Buffers: Balanced Middle Ground"})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Consistent performance"}),": Moderate speed across all scales"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Standard tooling"}),": Wide ecosystem support"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.strong,{children:"Predictable overhead"}),": ~22% size penalty but stable"]}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Recommendation"}),": For the Online Feature Store's typical use patterns with ",(0,o.jsx)(r.strong,{children:"sub-1,000 feature requests"}),", ",(0,o.jsx)(r.strong,{children:"PSDB is the optimal choice"})," for production deployments."]}),"\n",(0,o.jsx)(r.h2,{id:"raw-benchmark-output-uncompressed-data",children:"Raw Benchmark Output [Uncompressed Data]"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"goos: darwin\ngoarch: arm64\npkg: github.com/Meesho/BharatMLStack/online-feature-store/internal/data/blocks\nBenchmarkInt32SerializationPSDB/PSDB/Size-100-10                 1940238               625.3 ns/op             409.0 bytes       461 B/op          4 allocs/op\nBenchmarkInt32SerializationPSDB/PSDB/Size-1000-10                 288300              4056 ns/op              4009 bytes        4143 B/op          4 allocs/op\nBenchmarkInt32SerializationPSDB/PSDB/Size-10000-10                 32144             37357 ns/op             40009 bytes       41032 B/op          4 allocs/op\nBenchmarkInt32SerializationPSDB/PSDB/Size-100000-10                 3244            359932 ns/op            400009 bytes      401572 B/op          4 allocs/op\nBenchmarkInt32SerializationProto3/Proto3/Size-100-10             1703066               695.9 ns/op             486.0 bytes       768 B/op          2 allocs/op\nBenchmarkInt32SerializationProto3/Proto3/Size-1000-10             194142              6004 ns/op              4885 bytes        5632 B/op          2 allocs/op\nBenchmarkInt32SerializationProto3/Proto3/Size-10000-10             20937             57674 ns/op             48734 bytes       49408 B/op          2 allocs/op\nBenchmarkInt32SerializationProto3/Proto3/Size-100000-10             2085            556541 ns/op            487263 bytes      491776 B/op          2 allocs/op\nBenchmarkInt32SerializationArrow/Arrow/Size-100-10                302257              3831 ns/op               680.0 bytes      7032 B/op         66 allocs/op\nBenchmarkInt32SerializationArrow/Arrow/Size-1000-10               228718              5191 ns/op              4280 bytes       15544 B/op         66 allocs/op\nBenchmarkInt32SerializationArrow/Arrow/Size-10000-10               52482             23173 ns/op             40280 bytes      122617 B/op         66 allocs/op\nBenchmarkInt32SerializationArrow/Arrow/Size-100000-10               9765            120081 ns/op            400280 bytes      957948 B/op         66 allocs/op\nBenchmarkInt32SerializationComparison/Comparison/Size-100/PSDB-10        1919401               670.2 ns/op        409.0 bytes            461 B/op          4 allocs/op\nBenchmarkInt32SerializationComparison/Comparison/Size-100/Proto3-10      1733599               693.2 ns/op        490.0 bytes            768 B/op          2 allocs/op\nBenchmarkInt32SerializationComparison/Comparison/Size-100/Arrow-10        304066              3896 ns/op          680.0 bytes           7032 B/op         66 allocs/op\nBenchmarkInt32SerializationComparison/Comparison/Size-1000/PSDB-10        290784              4074 ns/op         4009 bytes     4143 B/op          4 allocs/op\nBenchmarkInt32SerializationComparison/Comparison/Size-1000/Proto3-10      196962              6034 ns/op         4882 bytes     5632 B/op          2 allocs/op\nBenchmarkInt32SerializationComparison/Comparison/Size-1000/Arrow-10       227908              5240 ns/op         4280 bytes    15544 B/op         66 allocs/op\nBenchmarkInt32SerializationComparison/Comparison/Size-10000/PSDB-10        31732             38064 ns/op        40009 bytes    41024 B/op          4 allocs/op\nBenchmarkInt32SerializationComparison/Comparison/Size-10000/Proto3-10              20827             57670 ns/op         48745 bytes           49408 B/op          2 allocs/op\nBenchmarkInt32SerializationComparison/Comparison/Size-10000/Arrow-10               52000             23557 ns/op         40280 bytes          122617 B/op         66 allocs/op\nBenchmarkInt32SerializationComparison/Comparison/Size-100000/PSDB-10                3268            363817 ns/op        400009 bytes          401575 B/op          4 allocs/op\nBenchmarkInt32SerializationComparison/Comparison/Size-100000/Proto3-10              2097            559621 ns/op        487247 bytes          491776 B/op          2 allocs/op\nBenchmarkInt32SerializationComparison/Comparison/Size-100000/Arrow-10              10000            118489 ns/op        400280 bytes          957947 B/op         66 allocs/op\nBenchmarkInt32SizeComparison/SizeOnly/Size-100-10                               1000000000               0.0000223 ns/op           680.0 arrow_bytes               170.0 arrow_ratio_pct           490.0 proto3_bytes         122.5 proto3_ratio_pct           409.0 psdb_bytes        102.2 psdb_ratio_pct            400.0 raw_bytes\nBenchmarkInt32SizeComparison/SizeOnly/Size-1000-10                              1000000000               0.0000379 ns/op          4280 arrow_bytes         107.0 arrow_ratio_pct          4881 proto3_bytes        122.0 proto3_ratio_pct             4009 psdb_bytes          100.2 psdb_ratio_pct           4000 raw_bytes\nBenchmarkInt32SizeComparison/SizeOnly/Size-10000-10                             1000000000               0.0001182 ns/op         40280 arrow_bytes         100.7 arrow_ratio_pct         48717 proto3_bytes        121.8 proto3_ratio_pct            40009 psdb_bytes          100.0 psdb_ratio_pct          40000 raw_bytes\nBenchmarkInt32SizeComparison/SizeOnly/Size-100000-10                            1000000000               0.001034 ns/op         400280 arrow_bytes         100.1 arrow_ratio_pct        487225 proto3_bytes        121.8 proto3_ratio_pct           400009 psdb_bytes          100.0 psdb_ratio_pct         400000 raw_bytes\nBenchmarkInt32MemoryEfficiency/Memory/Size-100/PSDB_Pooled-10                    1926676               622.4 ns/op       461 B/op          4 allocs/op\nBenchmarkInt32MemoryEfficiency/Memory/Size-100/Proto3-10                         1713428               685.0 ns/op       768 B/op          2 allocs/op\nBenchmarkInt32MemoryEfficiency/Memory/Size-100/Arrow-10                           312584              4029 ns/op        7032 B/op         66 allocs/op\nBenchmarkInt32MemoryEfficiency/Memory/Size-1000/PSDB_Pooled-10                    290197              4189 ns/op        4143 B/op          4 allocs/op\nBenchmarkInt32MemoryEfficiency/Memory/Size-1000/Proto3-10                         195694              6078 ns/op        5632 B/op          2 allocs/op\nBenchmarkInt32MemoryEfficiency/Memory/Size-1000/Arrow-10                          224722              5190 ns/op       15544 B/op         66 allocs/op\nBenchmarkInt32MemoryEfficiency/Memory/Size-10000/PSDB_Pooled-10                    31898             37684 ns/op       41029 B/op          4 allocs/op\nBenchmarkInt32MemoryEfficiency/Memory/Size-10000/Proto3-10                         20840             58032 ns/op       49408 B/op          2 allocs/op\nBenchmarkInt32MemoryEfficiency/Memory/Size-10000/Arrow-10                          51440             24049 ns/op      122617 B/op         66 allocs/op\nBenchmarkInt32MemoryEfficiency/Memory/Size-100000/PSDB_Pooled-10                    3325            357690 ns/op      401814 B/op          4 allocs/op\nBenchmarkInt32MemoryEfficiency/Memory/Size-100000/Proto3-10                         2158            559694 ns/op      491776 B/op          2 allocs/op\nBenchmarkInt32MemoryEfficiency/Memory/Size-100000/Arrow-10                          9622            117515 ns/op      957948 B/op         66 allocs/op\nBenchmarkInt32Throughput/Throughput/PSDB-10                                       290912              4101 ns/op     975.31 MB/s        4143 B/op          4 allocs/op\nBenchmarkInt32Throughput/Throughput/Proto3-10                                     199087              6005 ns/op     666.12 MB/s        5632 B/op          2 allocs/op\nBenchmarkInt32Throughput/Throughput/Arrow-10                                      229594              5207 ns/op     768.25 MB/s       15544 B/op         66 allocs/op\nBenchmarkGetPSDBPoolWithoutPool-10                                              23836599                50.64 ns/op      192 B/op          1 allocs/op\nBenchmarkGetPSDBPoolWithPool-10                                                 100000000               10.76 ns/op        0 B/op          0 allocs/op\nPASS\nok      github.com/Meesho/BharatMLStack/online-feature-store/internal/data/blocks       58.891s\n"})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.em,{children:"Benchmarks run on Apple Silicon (ARM64) with Go 1.22.12. Results may vary on different architectures and Go versions."})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);