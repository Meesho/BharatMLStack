"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[405],{8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var r=s(6540);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}},9554:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/v1.0.0-onfs-arch-7b3e91a84b2a24a378d13db769995c08.png"},9563:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"online-feature-store/v1.0.0/architecture","title":"Architecture","description":"The Online Feature Store (OnFS) is part of BharatMLStack, designed to support real-time ML workloads through low-latency feature retrieval and flexible feature ingestion pipelines. It ensures that features generated offline or online are immediately accessible for inference.","source":"@site/docs/online-feature-store/v1.0.0/architecture.md","sourceDirName":"online-feature-store/v1.0.0","slug":"/online-feature-store/v1.0.0/architecture","permalink":"/bharatmlstack/online-feature-store/v1.0.0/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/Meesho/BharatMLStack/tree/main/docs/docs/online-feature-store/v1.0.0/architecture.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Architecture","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"v1.0.0","permalink":"/bharatmlstack/category/v100"},"next":{"title":"Data Formats","permalink":"/bharatmlstack/online-feature-store/v1.0.0/data-formats"}}');var t=s(4848),i=s(8453);const l={title:"Architecture",sidebar_position:1},o="BharatMLStack - Online Feature Store (OnFS)",a={},c=[{value:"\ud83e\udde9 Key Components",id:"-key-components",level:2},{value:"1. <strong>Data Ingestion Paths</strong>",id:"1-data-ingestion-paths",level:3},{value:"a. <strong>Direct Push from Feature Engineering Jobs</strong>",id:"a-direct-push-from-feature-engineering-jobs",level:4},{value:"b. <strong>Push from Offline Feature Store</strong>",id:"b-push-from-offline-feature-store",level:4},{value:"c. <strong>Streaming Push via Apache Flink</strong>",id:"c-streaming-push-via-apache-flink",level:4},{value:"2. <strong>Message Queue: Kafka</strong>",id:"2-message-queue-kafka",level:3},{value:"3. <strong>Core Components</strong>",id:"3-core-components",level:3},{value:"\ud83e\udde0 <strong>Horizon Control Plane</strong>",id:"-horizon-control-plane",level:4},{value:"\ud83d\udd0d <strong>Trufflebox UI</strong>",id:"-trufflebox-ui",level:4},{value:"\u2699\ufe0f <strong>OnFS-Consumers</strong>",id:"\ufe0f-onfs-consumers",level:4},{value:"\ud83d\ude80 <strong>OnFS API Server</strong>",id:"-onfs-api-server",level:4},{value:"4. <strong>Online Databases</strong>",id:"4-online-databases",level:3},{value:"5. <strong>Clients for Serving</strong>",id:"5-clients-for-serving",level:3},{value:"6. <strong>Observability</strong>",id:"6-observability",level:3},{value:"\ud83d\udcbb Supported Environments",id:"-supported-environments",level:2},{value:"\ud83d\udc65 Target Users",id:"-target-users",level:2},{value:"\u2705 Benefits",id:"-benefits",level:2},{value:"Contributing",id:"contributing",level:2},{value:"Community &amp; Support",id:"community--support",level:2},{value:"License",id:"license",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"bharatmlstack---online-feature-store-onfs",children:"BharatMLStack - Online Feature Store (OnFS)"})}),"\n",(0,t.jsxs)(n.p,{children:["The Online Feature Store (OnFS) is part of ",(0,t.jsx)(n.strong,{children:"BharatMLStack"}),", designed to support real-time ML workloads through low-latency feature retrieval and flexible feature ingestion pipelines. It ensures that features generated offline or online are immediately accessible for inference."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"BharatMLStack&#39;s Online-feature-store Architecture",src:s(9554).A+"",width:"2174",height:"1208"})}),"\n",(0,t.jsx)(n.h2,{id:"-key-components",children:"\ud83e\udde9 Key Components"}),"\n",(0,t.jsxs)(n.h3,{id:"1-data-ingestion-paths",children:["1. ",(0,t.jsx)(n.strong,{children:"Data Ingestion Paths"})]}),"\n",(0,t.jsxs)(n.h4,{id:"a-direct-push-from-feature-engineering-jobs",children:["a. ",(0,t.jsx)(n.strong,{children:"Direct Push from Feature Engineering Jobs"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Source:"})," Apache Spark"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Client:"})," ",(0,t.jsx)(n.code,{children:"spark_feature_push_client"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flow:"})," Features are pushed directly to Kafka."]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"b-push-from-offline-feature-store",children:["b. ",(0,t.jsx)(n.strong,{children:"Push from Offline Feature Store"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Source:"})," Delta Lake, GCS, or S3"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flow:"})," Scheduled notebooks (",(0,t.jsx)(n.code,{children:"push_features_to_online-feature-stores.ipynb"}),") push to Kafka using the same ",(0,t.jsx)(n.code,{children:"spark_feature_push_client"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"c-streaming-push-via-apache-flink",children:["c. ",(0,t.jsx)(n.strong,{children:"Streaming Push via Apache Flink"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Source:"})," Flink streaming jobs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Client:"})," ",(0,t.jsx)(n.code,{children:"custom-producer"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flow:"})," Real-time features sent to Kafka."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"2-message-queue-kafka",children:["2. ",(0,t.jsx)(n.strong,{children:"Message Queue: Kafka"})]}),"\n",(0,t.jsx)(n.p,{children:"Kafka serves as a decoupled buffer between producers (push clients) and consumers (OnFS ingestion workers), ensuring durability and backpressure handling."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"3-core-components",children:["3. ",(0,t.jsx)(n.strong,{children:"Core Components"})]}),"\n",(0,t.jsxs)(n.h4,{id:"-horizon-control-plane",children:["\ud83e\udde0 ",(0,t.jsx)(n.strong,{children:"Horizon Control Plane"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Manages config distribution and metadata orchestration."}),"\n",(0,t.jsxs)(n.li,{children:["Stores schemas, feature group mappings, job configurations in ",(0,t.jsx)(n.code,{children:"etcd"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"-trufflebox-ui",children:["\ud83d\udd0d ",(0,t.jsx)(n.strong,{children:"Trufflebox UI"})]}),"\n",(0,t.jsx)(n.p,{children:"Frontend interface for managing the ML Feature Store ecosystem:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Feature Catalog"})," \u2013 Browse, search, and inspect registered features and groups."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Store and Job Registry"})," \u2013 View and manage ingestion jobs, feature store states, and lineage."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Admin Ops"})," \u2013 Approve or reject feature group pushes and schema edits."]}),"\n",(0,t.jsxs)(n.li,{children:["Designed for use by ",(0,t.jsx)(n.strong,{children:"Data Scientists, MLEs"}),", and ",(0,t.jsx)(n.strong,{children:"Platform Admins"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"\ufe0f-onfs-consumers",children:["\u2699\ufe0f ",(0,t.jsx)(n.strong,{children:"OnFS-Consumers"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Kafka consumers that read and validate feature messages."}),"\n",(0,t.jsx)(n.li,{children:"Responsible for persisting features to online databases (Redis, ScyllaDB, DragonflyDB)."}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"-onfs-api-server",children:["\ud83d\ude80 ",(0,t.jsx)(n.strong,{children:"OnFS API Server"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["gRPC server exposing interfaces for:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Real-time feature persistence."}),"\n",(0,t.jsx)(n.li,{children:"Low-latency feature retrieval."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Access controlled and schema-validated via ",(0,t.jsx)(n.code,{children:"etcd"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"4-online-databases",children:["4. ",(0,t.jsx)(n.strong,{children:"Online Databases"})]}),"\n",(0,t.jsx)(n.p,{children:"Stores real-time features for high-performance retrieval:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"DragonflyDB"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Redis"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"ScyllaDB"})}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"5-clients-for-serving",children:["5. ",(0,t.jsx)(n.strong,{children:"Clients for Serving"})]}),"\n",(0,t.jsx)(n.p,{children:"Applications use client SDKs to fetch features:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Go SDK"}),": ",(0,t.jsx)(n.code,{children:"go-sdk"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Python SDK"}),": ",(0,t.jsx)(n.code,{children:"grpc-feature-client"})]}),"\n",(0,t.jsx)(n.li,{children:"Used in backend inference apps to request features using entity keys."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"6-observability",children:["6. ",(0,t.jsx)(n.strong,{children:"Observability"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prometheus"})," \u2013 Metrics collection (e.g., ingest lag, QPS, latency)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Grafana"})," \u2013 Dashboard for platform health, feature access, ingestion success/failure."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-supported-environments",children:"\ud83d\udcbb Supported Environments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Kubernetes (K8s)"}),"\n",(0,t.jsx)(n.li,{children:"Google Kubernetes Engine (GKE)"}),"\n",(0,t.jsx)(n.li,{children:"Amazon EKS"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-target-users",children:"\ud83d\udc65 Target Users"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"User"}),(0,t.jsx)(n.th,{children:"Role"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Data Scientists"}),(0,t.jsx)(n.td,{children:"Browse features, define jobs, approve/reject changes via Trufflebox UI"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"MLEs"}),(0,t.jsx)(n.td,{children:"Develop and push features using Spark/Flink/notebooks"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Infra Admins"}),(0,t.jsx)(n.td,{children:"Manage store lifecycle, metadata, and approvals"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Backend Devs"}),(0,t.jsx)(n.td,{children:"Use SDKs to retrieve features in Go/Python inference services"})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-benefits",children:"\u2705 Benefits"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Unified real-time and offline ingestion."}),"\n",(0,t.jsx)(n.li,{children:"Low-latency inference-ready features."}),"\n",(0,t.jsx)(n.li,{children:"Config-driven orchestration."}),"\n",(0,t.jsx)(n.li,{children:"Built-in approval workflows via Trufflebox."}),"\n",(0,t.jsx)(n.li,{children:"Scalable across thousands of entities and feature groups."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,t.jsxs)(n.p,{children:["We welcome contributions from the community! Please see our ",(0,t.jsx)(n.a,{href:"https://github.com/Meesho/BharatMLStack/blob/main/CONTRIBUTING.md",children:"Contributing Guide"})," for details on how to get started."]}),"\n",(0,t.jsx)(n.h2,{id:"community--support",children:"Community & Support"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\ud83d\udcac ",(0,t.jsx)(n.strong,{children:"Discord"}),": Join our ",(0,t.jsx)(n.a,{href:"https://discord.gg/XkT7XsV2AU",children:"community chat"})]}),"\n",(0,t.jsxs)(n.li,{children:["\ud83d\udc1b ",(0,t.jsx)(n.strong,{children:"Issues"}),": Report bugs and request features on ",(0,t.jsx)(n.a,{href:"https://github.com/Meesho/BharatMLStack/issues",children:"GitHub Issues"})]}),"\n",(0,t.jsxs)(n.li,{children:["\ud83d\udce7 ",(0,t.jsx)(n.strong,{children:"Email"}),": Contact us at ",(0,t.jsx)(n.a,{href:"mailto:ml-oss@meesho.com",children:"ml-oss@meesho.com"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,t.jsxs)(n.p,{children:["BharatMLStack is open-source software licensed under the ",(0,t.jsx)(n.a,{href:"https://github.com/Meesho/BharatMLStack/blob/main/LICENSE.md",children:"BharatMLStack Business Source License 1.1"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("div",{align:"center",children:(0,t.jsx)("strong",{children:"Built with \u2764\ufe0f for the ML community from Meesho"})}),"\n",(0,t.jsx)("div",{align:"center",children:(0,t.jsx)("strong",{children:"If you find this useful, \u2b50\ufe0f the repo \u2014 your support means the world to us!"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);