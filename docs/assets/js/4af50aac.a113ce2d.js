"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1964],{6220:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"sdks/go/v1.0.0/feature_client","title":"GRPC Feature client","description":"Build Status","source":"@site/docs/sdks/go/v1.0.0/feature_client.md","sourceDirName":"sdks/go/v1.0.0","slug":"/sdks/go/v1.0.0/feature_client","permalink":"/BharatMLStack/sdks/go/v1.0.0/feature_client","draft":false,"unlisted":false,"editUrl":"https://github.com/Meesho/BharatMLStack/tree/main/docs/docs/sdks/go/v1.0.0/feature_client.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"GRPC Feature client","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Go SDK","permalink":"/BharatMLStack/category/go-sdk"},"next":{"title":"Python SDK","permalink":"/BharatMLStack/category/python-sdk"}}');var i=t(4848),r=t(8453);const l={title:"GRPC Feature client",sidebar_position:1},o="BharatMLStack Go SDK",a={},c=[{value:"Features",id:"features",level:2},{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Complete Example",id:"complete-example",level:3},{value:"Development",id:"development",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Building",id:"building",level:3},{value:"Testing",id:"testing",level:3},{value:"Contributing",id:"contributing",level:2},{value:"Community &amp; Support",id:"community--support",level:2},{value:"License",id:"license",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{src:"https://github.com/Meesho/BharatMLStack/actions/workflows/go-sdk.yml/badge.svg",alt:"Build Status"}),"\n",(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/release-v1.0.0-blue?style=flat",alt:"Static Badge"}),"\n",(0,i.jsx)(n.a,{href:"https://discord.gg/XkT7XsV2AU",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/Discord-Join%20Chat-7289da?style=flat&logo=discord&logoColor=white",alt:"Discord"})})]}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"bharatmlstack-go-sdk",children:"BharatMLStack Go SDK"})}),"\n",(0,i.jsx)(n.p,{children:"A Go SDK for interacting with BharatMLStack components, providing easy-to-use client libraries for the Online Feature Store and other services."}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Online Feature Store Client"}),": Complete gRPC client for feature retrieval and persistence"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multiple API Methods"}),": Support for ",(0,i.jsx)(n.code,{children:"RetrieveFeatures"}),", ",(0,i.jsx)(n.code,{children:"RetrieveDecodedFeatures"}),", and ",(0,i.jsx)(n.code,{children:"PersistFeatures"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Protocol Buffer Support"}),": Generated clients from proto definitions with full type safety"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Batch Processing"}),": Configurable batch sizes for efficient bulk operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Authentication"}),": Built-in support for caller ID and token-based authentication"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Connection Management"}),": Configurable timeouts, TLS, and connection pooling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Metrics Integration"}),": Built-in timing and count metrics for monitoring"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type-Safe API"}),": Strongly typed Go interfaces and data structures"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test Coverage"}),": Comprehensive test suite with mocking support"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"go get github.com/Meesho/BharatMLStack/go-sdk\n"})}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.p,{children:"The SDK requires a configuration object with the following fields:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Host"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:'Server hostname (e.g., "localhost", "feature-store.example.com")'})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Port"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:'Server port (e.g., "8080", "443")'})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"CallerId"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"Unique identifier for your service/application"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"CallerToken"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"Authentication token for API access"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"DeadLine"})}),(0,i.jsx)(n.td,{children:"int"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"Request timeout in milliseconds (default: 5000)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"PlainText"})}),(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"Use plaintext connection instead of TLS (default: false)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"BatchSize"})}),(0,i.jsx)(n.td,{children:"int"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"Maximum batch size for bulk operations (default: 50)"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "log"\n    \n    "github.com/Meesho/BharatMLStack/go-sdk/pkg/onfs"\n)\n\nfunc main() {\n    config := &onfs.Config{\n        Host:        "localhost",\n        Port:        "8080",\n        PlainText:   true, // For local development\n        CallerId:    "my-service",\n        CallerToken: "my-token",\n    }\n\n    // Initialize client (timing and count can be nil)\n    client := onfs.NewClientV1(config, nil, nil)\n    \n    // Your feature operations here...\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"complete-example",children:"Complete Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "log"\n    "time"\n    \n    "github.com/Meesho/BharatMLStack/go-sdk/pkg/onfs"\n)\n\nfunc main() {\n    // Create configuration\n    config := &onfs.Config{\n        Host:        "localhost",\n        Port:        "8080",\n        DeadLine:    5000, // 5 seconds timeout in milliseconds\n        PlainText:   true, // Use plaintext connection for local development\n        BatchSize:   50,   // Optional: batch size for requests\n        CallerId:    "your-service-id",\n        CallerToken: "your-auth-token",\n    }\n\n    // Timing and count functions (can be nil for basic usage)\n    timing := func(name string, value time.Duration, tags []string) {\n        log.Printf("Timing: %s took %v with tags %v", name, value, tags)\n    }\n    count := func(name string, value int64, tags []string) {\n        log.Printf("Count: %s = %d with tags %v", name, value, tags)\n    }\n\n    // Initialize the client\n    client := onfs.InitClient(onfs.Version1, config, timing, count)\n    // Or alternatively use: client := onfs.NewClientV1(config, timing, count)\n\n    ctx := context.Background()\n\n    // Example: Retrieve features\n    query := &onfs.Query{\n        EntityLabel: "user",\n        FeatureGroups: []onfs.FeatureGroup{\n            {\n                Label:         "user_features",\n                FeatureLabels: []string{"age", "location", "preferences"},\n            },\n        },\n        KeysSchema: []string{"user_id"},\n        Keys: []onfs.Keys{\n            {Cols: []string{"12345"}},\n            {Cols: []string{"67890"}},\n        },\n    }\n\n    result, err := client.RetrieveFeatures(ctx, query)\n    if err != nil {\n        log.Fatalf("Failed to retrieve features: %v", err)\n    }\n\n    log.Printf("Retrieved %d rows for entity %s", len(result.Rows), result.EntityLabel)\n\n    // Example: Retrieve decoded features (string values)\n    decodedResult, err := client.RetrieveDecodedFeatures(ctx, query)\n    if err != nil {\n        log.Fatalf("Failed to retrieve decoded features: %v", err)\n    }\n\n    log.Printf("Retrieved %d decoded rows", len(decodedResult.Rows))\n\n    // Example: Persist features\n    persistRequest := &onfs.PersistFeaturesRequest{\n        EntityLabel: "user",\n        KeysSchema:  []string{"user_id"},\n        FeatureGroups: []onfs.FeatureGroupSchema{\n            {\n                Label:         "user_features",\n                FeatureLabels: []string{"age", "location"},\n            },\n        },\n        Data: []onfs.Data{\n            {\n                KeyValues: []string{"12345"},\n                FeatureValues: []onfs.FeatureValues{\n                    {\n                        Values: onfs.Values{\n                            Int32Values:  []int32{25},\n                            StringValues: []string{"New York"},\n                        },\n                    },\n                },\n            },\n        },\n    }\n\n    persistResponse, err := client.PersistFeatures(ctx, persistRequest)\n    if err != nil {\n        log.Fatalf("Failed to persist features: %v", err)\n    }\n\n    log.Printf("Persist result: %s", persistResponse.Message)\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"development",children:"Development"}),"\n",(0,i.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Go 1.22 or later (as specified in go.mod)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"building",children:"Building"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Build all packages\ngo build ./...\n\n# Run tests\ngo test ./...\n\n# Run tests with coverage\ngo test -v -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out\n"})}),"\n",(0,i.jsx)(n.h3,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run all tests\ngo test -v ./...\n\n# Run specific package tests\ngo test -v ./pkg/onfs\n\n# Run with race detection\ngo test -race ./...\n"})}),"\n",(0,i.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,i.jsxs)(n.p,{children:["We welcome contributions from the community! Please see our ",(0,i.jsx)(n.a,{href:"https://github.com/Meesho/BharatMLStack/blob/main/CONTRIBUTING.md",children:"Contributing Guide"})," for details on how to get started."]}),"\n",(0,i.jsx)(n.h2,{id:"community--support",children:"Community & Support"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\ud83d\udcac ",(0,i.jsx)(n.strong,{children:"Discord"}),": Join our ",(0,i.jsx)(n.a,{href:"https://discord.gg/XkT7XsV2AU",children:"community chat"})]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udc1b ",(0,i.jsx)(n.strong,{children:"Issues"}),": Report bugs and request features on ",(0,i.jsx)(n.a,{href:"https://github.com/Meesho/BharatMLStack/issues",children:"GitHub Issues"})]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udce7 ",(0,i.jsx)(n.strong,{children:"Email"}),": Contact us at ",(0,i.jsx)(n.a,{href:"mailto:ml-oss@meesho.com",children:"ml-oss@meesho.com"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,i.jsxs)(n.p,{children:["BharatMLStack is open-source software licensed under the ",(0,i.jsx)(n.a,{href:"https://github.com/Meesho/BharatMLStack/blob/main/LICENSE.md",children:"BharatMLStack Business Source License 1.1"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)("div",{align:"center",children:(0,i.jsx)("strong",{children:"Built with \u2764\ufe0f for the ML community from Meesho"})}),"\n",(0,i.jsx)("div",{align:"center",children:(0,i.jsx)("strong",{children:"If you find this useful, \u2b50\ufe0f the repo \u2014 your support means the world to us!"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);