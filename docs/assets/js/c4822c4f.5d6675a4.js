"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[915],{3649:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"online-feature-store/v1.0.0/functionalities","title":"Key Functionalities","description":"Overview","source":"@site/docs/online-feature-store/v1.0.0/functionalities.md","sourceDirName":"online-feature-store/v1.0.0","slug":"/online-feature-store/v1.0.0/functionalities","permalink":"/BharatMLStack/online-feature-store/v1.0.0/functionalities","draft":false,"unlisted":false,"editUrl":"https://github.com/Meesho/BharatMLStack/tree/main/docs/docs/online-feature-store/v1.0.0/functionalities.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Key Functionalities","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Benchmarks","permalink":"/BharatMLStack/online-feature-store/v1.0.0/benchmarks"},"next":{"title":"Release Notes","permalink":"/BharatMLStack/online-feature-store/v1.0.0/release-notes"}}');var s=r(4848),t=r(8453);const l={title:"Key Functionalities",sidebar_position:4},o="Online Feature Store - Key Functionalities",a={},c=[{value:"Overview",id:"overview",level:2},{value:"\ud83d\ude80 Core Capabilities",id:"-core-capabilities",level:2},{value:"<strong>Real-Time Feature Serving</strong>",id:"real-time-feature-serving",level:3},{value:"<strong>Multi-Format Data Support</strong>",id:"multi-format-data-support",level:3},{value:"<strong>Multi-Database Backend</strong>",id:"multi-database-backend",level:3},{value:"\ud83c\udfaf Key Features",id:"-key-features",level:2},{value:"<strong>Performance Optimizations</strong>",id:"performance-optimizations",level:3},{value:"<strong>Data Management</strong>",id:"data-management",level:3},{value:"<strong>Developer Experience</strong>",id:"developer-experience",level:3},{value:"<strong>Production Ready</strong>",id:"production-ready",level:3},{value:"\ud83d\udcca Use Cases",id:"-use-cases",level:2},{value:"<strong>Real-Time ML Inference</strong>",id:"real-time-ml-inference",level:3},{value:"<strong>Batch Feature Serving</strong>",id:"batch-feature-serving",level:3},{value:"<strong>A/B Testing Support</strong>",id:"ab-testing-support",level:3},{value:"\ud83c\udf9b\ufe0f Configuration Options",id:"\ufe0f-configuration-options",level:2},{value:"<strong>Performance Tuning</strong>",id:"performance-tuning",level:3},{value:"<strong>Storage Configuration</strong>",id:"storage-configuration",level:3},{value:"<strong>Monitoring &amp; Observability</strong>",id:"monitoring--observability",level:3},{value:"\ud83d\udcc8 Production Deployment",id:"-production-deployment",level:2},{value:"<strong>Recommended Architecture</strong>",id:"recommended-architecture",level:3},{value:"<strong>Scaling Guidelines</strong>",id:"scaling-guidelines",level:3},{value:"Contributing",id:"contributing",level:2},{value:"Community &amp; Support",id:"community--support",level:2},{value:"License",id:"license",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"online-feature-store---key-functionalities",children:"Online Feature Store - Key Functionalities"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The BharatML Online Feature Store is a high-performance, production-ready system designed to serve machine learning features with ",(0,s.jsx)(n.strong,{children:"sub-10ms P99 latency"})," and ",(0,s.jsx)(n.strong,{children:"1M+ RPS capacity"}),". It bridges the gap between offline feature engineering and real-time model inference."]}),"\n",(0,s.jsx)(n.h2,{id:"-core-capabilities",children:"\ud83d\ude80 Core Capabilities"}),"\n",(0,s.jsx)(n.h3,{id:"real-time-feature-serving",children:(0,s.jsx)(n.strong,{children:"Real-Time Feature Serving"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ultra-Low Latency"}),": Sub-10ms P99 response times"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"High Throughput"}),": Tested at 1M+ requests per second with 100 IDs per request"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch Retrieval"}),": Fetch multiple features for multiple entities in a single request"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Point-in-Time Consistency"}),": Ensure feature consistency across model predictions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dependent feature consistency"}),": features part of same feature group."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"multi-format-data-support",children:(0,s.jsx)(n.strong,{children:"Multi-Format Data Support"})}),"\n",(0,s.jsx)(n.p,{children:"Supports all common ML data types with optimized serialization:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Data Type"}),(0,s.jsx)(n.th,{children:"Support"}),(0,s.jsx)(n.th,{children:"Use Cases"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Integers"})}),(0,s.jsx)(n.td,{children:"int8, int16, int32, int64"}),(0,s.jsx)(n.td,{children:"User IDs, counts, categorical encodings"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Floats"})}),(0,s.jsx)(n.td,{children:"float16, float32, float64"}),(0,s.jsx)(n.td,{children:"Continuous features, embeddings, scores"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Strings"})}),(0,s.jsx)(n.td,{children:"Variable length"}),(0,s.jsx)(n.td,{children:"Categories, text features, metadata"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Booleans"})}),(0,s.jsx)(n.td,{children:"Bit-packed"}),(0,s.jsx)(n.td,{children:"Feature flags, binary indicators"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Vectors"})}),(0,s.jsx)(n.td,{children:"All above types"}),(0,s.jsx)(n.td,{children:"Embeddings, feature arrays, time series"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"multi-database-backend",children:(0,s.jsx)(n.strong,{children:"Multi-Database Backend"})}),"\n",(0,s.jsx)(n.p,{children:"Flexible storage options for different deployment needs:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\ud83d\udd25 Scylla DB"}),": Ultra-high performance NoSQL (recommended for production)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\u26a1 Dragonfly"}),": Modern Redis alternative with better memory efficiency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\ud83d\udcca Redis"}),": Standard in-memory store for development and small-scale deployments"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-key-features",children:"\ud83c\udfaf Key Features"}),"\n",(0,s.jsx)(n.h3,{id:"performance-optimizations",children:(0,s.jsx)(n.strong,{children:"Performance Optimizations"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom PSDB Format"}),": Proprietary serialization format optimized for ML features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Object Pooling"}),": Memory-efficient resource reuse"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Connection Pooling"}),": Optimized database connection management"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compression Support"}),": Multiple algorithms (LZ4, Snappy, ZSTD) with intelligent fallback"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"data-management",children:(0,s.jsx)(n.strong,{children:"Data Management"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TTL Support"}),": Automatic feature expiration with configurable time-to-live"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Versioning"}),": Multiple feature schema versions with backward compatibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch Operations"}),": Efficient bulk read/write operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Feature Groups"}),": Logical grouping of related features for better organization"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"developer-experience",children:(0,s.jsx)(n.strong,{children:"Developer Experience"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"gRPC API"}),": High-performance, language-agnostic interface"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Go SDK"}),": Native Go client with connection pooling and error handling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Python SDK"}),": ML-friendly Python bindings for data scientists"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RESTful Interface"}),": HTTP API for health check"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"production-ready",children:(0,s.jsx)(n.strong,{children:"Production Ready"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Health Checks"}),": Built-in monitoring and health endpoints"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Metrics Integration"}),": DataDog, Prometheus-compatible metrics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Structured Logging"}),": JSON-formatted logs with configurable levels"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Graceful Shutdown"}),": Clean resource cleanup on termination"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-use-cases",children:"\ud83d\udcca Use Cases"}),"\n",(0,s.jsx)(n.h3,{id:"real-time-ml-inference",children:(0,s.jsx)(n.strong,{children:"Real-Time ML Inference"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// Fetch user features for recommendation model\nquery := &onfs.Query{\n    EntityLabel: "user",\n    FeatureGroups: []onfs.FeatureGroup{\n        {\n            Label:         "demographics",\n            FeatureLabels: []string{"age", "location", "income"},\n        },\n        {\n            Label:         "behavior", \n            FeatureLabels: []string{"click_rate", "purchase_history"},\n        },\n    },\n    KeysSchema: []string{"user_id"},\n    Keys: []onfs.Keys{\n        {Cols: []string{"user_123"}},\n    },\n}\n\nresult, err := client.RetrieveFeatures(ctx, query)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"batch-feature-serving",children:(0,s.jsx)(n.strong,{children:"Batch Feature Serving"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// Bulk feature retrieval for model training\nquery := &onfs.Query{\n    EntityLabel: "transaction",\n    FeatureGroups: []onfs.FeatureGroup{\n        {\n            Label:         "transaction_history",\n            FeatureLabels: []string{"amount", "frequency", "merchant_type"},\n        },\n        {\n            Label:         "risk_scores",\n            FeatureLabels: []string{"fraud_score", "credit_score"},\n        },\n    },\n    KeysSchema: []string{"transaction_id"},\n    Keys: []onfs.Keys{\n        {Cols: []string{"txn_001"}},\n        {Cols: []string{"txn_002"}},\n        // ... 100s of transaction IDs\n    },\n}\n\nresult, err := client.RetrieveFeatures(ctx, query)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"ab-testing-support",children:(0,s.jsx)(n.strong,{children:"A/B Testing Support"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// Version-aware feature retrieval with decoded values\nquery := &onfs.Query{\n    EntityLabel: "experiment",\n    FeatureGroups: []onfs.FeatureGroup{\n        {\n            Label:         "model_features_v2", // Specific version\n            FeatureLabels: []string{"feature_a", "feature_b", "feature_c"},\n        },\n    },\n    KeysSchema: []string{"user_id"},\n    Keys: []onfs.Keys{\n        {Cols: []string{"user_123"}},\n    },\n}\n\n// Get string-decoded values for easier debugging/analysis\ndecodedResult, err := client.RetrieveDecodedFeatures(ctx, query)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-configuration-options",children:"\ud83c\udf9b\ufe0f Configuration Options"}),"\n",(0,s.jsx)(n.h3,{id:"performance-tuning",children:(0,s.jsx)(n.strong,{children:"Performance Tuning"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cache TTL"}),": Configure feature freshness requirements"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"storage-configuration",children:(0,s.jsx)(n.strong,{children:"Storage Configuration"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Selection"}),": Choose backend based on scale and requirements"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Replication Factor"}),": RF=2 for ScyllaDB"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Partition Strategy"}),": DB side control - not handled here"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backup Frequency"}),": DB side control - not handled here"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"monitoring--observability",children:(0,s.jsx)(n.strong,{children:"Monitoring & Observability"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Metrics Collection"}),": Request rates, latencies, error rates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom Dashboards"}),": Feature-specific monitoring views"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-production-deployment",children:"\ud83d\udcc8 Production Deployment"}),"\n",(0,s.jsx)(n.h3,{id:"recommended-architecture",children:(0,s.jsx)(n.strong,{children:"Recommended Architecture"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Load Balancer"}),": Distribute traffic across multiple instances"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Feature Store Cluster"}),": 3+ instances for high availability"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Cluster"}),": Replicated backend with automatic failover"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitoring Stack"}),": Metrics, logs, and alerting infrastructure"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"scaling-guidelines",children:(0,s.jsx)(n.strong,{children:"Scaling Guidelines"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Horizontal Scaling"}),": Add more feature store instances"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Scaling"}),": Increase partition count or upgrade hardware"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dragonfly/Remote Cache Scaling"}),": Use Cluster or Failover/Sentinal based setup"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Connection Tuning"}),": Optimize pool sizes for your traffic patterns"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,s.jsxs)(n.p,{children:["We welcome contributions from the community! Please see our ",(0,s.jsx)(n.a,{href:"https://github.com/Meesho/BharatMLStack/blob/main/CONTRIBUTING.md",children:"Contributing Guide"})," for details on how to get started."]}),"\n",(0,s.jsx)(n.h2,{id:"community--support",children:"Community & Support"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\ud83d\udcac ",(0,s.jsx)(n.strong,{children:"Discord"}),": Join our ",(0,s.jsx)(n.a,{href:"https://discord.gg/XkT7XsV2AU",children:"community chat"})]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\udc1b ",(0,s.jsx)(n.strong,{children:"Issues"}),": Report bugs and request features on ",(0,s.jsx)(n.a,{href:"https://github.com/Meesho/BharatMLStack/issues",children:"GitHub Issues"})]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\udce7 ",(0,s.jsx)(n.strong,{children:"Email"}),": Contact us at ",(0,s.jsx)(n.a,{href:"mailto:ml-oss@meesho.com",children:"ml-oss@meesho.com"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,s.jsxs)(n.p,{children:["BharatMLStack is open-source software licensed under the ",(0,s.jsx)(n.a,{href:"https://github.com/Meesho/BharatMLStack/blob/main/LICENSE.md",children:"BharatMLStack Business Source License 1.1"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)("div",{align:"center",children:(0,s.jsx)("strong",{children:"Built with \u2764\ufe0f for the ML community from Meesho"})}),"\n",(0,s.jsx)("div",{align:"center",children:(0,s.jsx)("strong",{children:"If you find this useful, \u2b50\ufe0f the repo \u2014 your support means the world to us!"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var i=r(6540);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);