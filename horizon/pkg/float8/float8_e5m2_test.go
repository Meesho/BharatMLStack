package float8

import (
	"math"
	"testing"
)

func TestAllFP8E5M2ToFP32Value(t *testing.T) {

	// Test with all possible FP8 values [uint8: 0 to 255]

	tests := []struct {
		val      Float8e5m2
		expected float32
	}{
		{0, 0}, {1, 1.5258789e-05}, {2, 3.0517578e-05}, {3, 4.5776367e-05}, {4, 6.1035156e-05}, {5, 7.6293945e-05}, {6, 9.1552734e-05}, {7, 0.00010681152}, {8, 0.00012207031}, {9, 0.00015258789}, {10, 0.00018310547}, {11, 0.00021362305}, {12, 0.00024414062}, {13, 0.00030517578}, {14, 0.00036621094}, {15, 0.0004272461}, {16, 0.00048828125}, {17, 0.00061035156}, {18, 0.0007324219}, {19, 0.0008544922}, {20, 0.0009765625}, {21, 0.0012207031}, {22, 0.0014648438}, {23, 0.0017089844}, {24, 0.001953125}, {25, 0.0024414062}, {26, 0.0029296875}, {27, 0.0034179688}, {28, 0.00390625}, {29, 0.0048828125}, {30, 0.005859375}, {31, 0.0068359375}, {32, 0.0078125}, {33, 0.009765625}, {34, 0.01171875}, {35, 0.013671875}, {36, 0.015625}, {37, 0.01953125}, {38, 0.0234375}, {39, 0.02734375}, {40, 0.03125}, {41, 0.0390625}, {42, 0.046875}, {43, 0.0546875}, {44, 0.0625}, {45, 0.078125}, {46, 0.09375}, {47, 0.109375}, {48, 0.125}, {49, 0.15625}, {50, 0.1875}, {51, 0.21875}, {52, 0.25}, {53, 0.3125}, {54, 0.375}, {55, 0.4375}, {56, 0.5}, {57, 0.625}, {58, 0.75}, {59, 0.875}, {60, 1}, {61, 1.25}, {62, 1.5}, {63, 1.75}, {64, 2}, {65, 2.5}, {66, 3}, {67, 3.5}, {68, 4}, {69, 5}, {70, 6}, {71, 7}, {72, 8}, {73, 10}, {74, 12}, {75, 14}, {76, 16}, {77, 20}, {78, 24}, {79, 28}, {80, 32}, {81, 40}, {82, 48}, {83, 56}, {84, 64}, {85, 80}, {86, 96}, {87, 112}, {88, 128}, {89, 160}, {90, 192}, {91, 224}, {92, 256}, {93, 320}, {94, 384}, {95, 448}, {96, 512}, {97, 640}, {98, 768}, {99, 896}, {100, 1024}, {101, 1280}, {102, 1536}, {103, 1792}, {104, 2048}, {105, 2560}, {106, 3072}, {107, 3584}, {108, 4096}, {109, 5120}, {110, 6144}, {111, 7168}, {112, 8192}, {113, 10240}, {114, 12288}, {115, 14336}, {116, 16384}, {117, 20480}, {118, 24576}, {119, 28672}, {120, 32768}, {121, 40960}, {122, 49152}, {123, 57344}, {124, float32(math.Inf(1))}, {125, float32(math.NaN())}, {126, float32(math.NaN())}, {127, float32(math.NaN())}, {128, -0}, {129, -1.5258789e-05}, {130, -3.0517578e-05}, {131, -4.5776367e-05}, {132, -6.1035156e-05}, {133, -7.6293945e-05}, {134, -9.1552734e-05}, {135, -0.00010681152}, {136, -0.00012207031}, {137, -0.00015258789}, {138, -0.00018310547}, {139, -0.00021362305}, {140, -0.00024414062}, {141, -0.00030517578}, {142, -0.00036621094}, {143, -0.0004272461}, {144, -0.00048828125}, {145, -0.00061035156}, {146, -0.0007324219}, {147, -0.0008544922}, {148, -0.0009765625}, {149, -0.0012207031}, {150, -0.0014648438}, {151, -0.0017089844}, {152, -0.001953125}, {153, -0.0024414062}, {154, -0.0029296875}, {155, -0.0034179688}, {156, -0.00390625}, {157, -0.0048828125}, {158, -0.005859375}, {159, -0.0068359375}, {160, -0.0078125}, {161, -0.009765625}, {162, -0.01171875}, {163, -0.013671875}, {164, -0.015625}, {165, -0.01953125}, {166, -0.0234375}, {167, -0.02734375}, {168, -0.03125}, {169, -0.0390625}, {170, -0.046875}, {171, -0.0546875}, {172, -0.0625}, {173, -0.078125}, {174, -0.09375}, {175, -0.109375}, {176, -0.125}, {177, -0.15625}, {178, -0.1875}, {179, -0.21875}, {180, -0.25}, {181, -0.3125}, {182, -0.375}, {183, -0.4375}, {184, -0.5}, {185, -0.625}, {186, -0.75}, {187, -0.875}, {188, -1}, {189, -1.25}, {190, -1.5}, {191, -1.75}, {192, -2}, {193, -2.5}, {194, -3}, {195, -3.5}, {196, -4}, {197, -5}, {198, -6}, {199, -7}, {200, -8}, {201, -10}, {202, -12}, {203, -14}, {204, -16}, {205, -20}, {206, -24}, {207, -28}, {208, -32}, {209, -40}, {210, -48}, {211, -56}, {212, -64}, {213, -80}, {214, -96}, {215, -112}, {216, -128}, {217, -160}, {218, -192}, {219, -224}, {220, -256}, {221, -320}, {222, -384}, {223, -448}, {224, -512}, {225, -640}, {226, -768}, {227, -896}, {228, -1024}, {229, -1280}, {230, -1536}, {231, -1792}, {232, -2048}, {233, -2560}, {234, -3072}, {235, -3584}, {236, -4096}, {237, -5120}, {238, -6144}, {239, -7168}, {240, -8192}, {241, -10240}, {242, -12288}, {243, -14336}, {244, -16384}, {245, -20480}, {246, -24576}, {247, -28672}, {248, -32768}, {249, -40960}, {250, -49152}, {251, -57344}, {252, float32(math.Inf(-1))}, {253, float32(math.NaN())}, {254, float32(math.NaN())}, {255, float32(math.NaN())},
	}

	for _, test := range tests {

		result := FP8E5M2ToFP32Value(test.val)

		if !(math.IsNaN(float64(result)) && math.IsNaN(float64(test.expected)) || result == test.expected) {
			t.Errorf("FP8E5M2ToFP32Value failed. Expected %v, got %v", test.expected, result)
		}
	}
}

func TestFP8E5M2FromFP32Value(t *testing.T) {

	tests := []struct {
		val      float32
		expected Float8e5m2
	}{
		{0.0039537125, 28},     // random value within range
		{57344, 123},           // max normal
		{6.1035156e-05, 4},     // min normal
		{100000, 124},          // overflow
		{0, 0},                 // zero
		{4.57763671875e-05, 3}, // max sub-normal
		{1.52587890625e-05, 1}, // min sub-normal
		{0.0000012207031, 0},   // underflow
	}

	for _, test := range tests {

		result := FP8E5M2FromFP32Value(test.val)

		if result != test.expected {
			t.Errorf("FP8E5M2FromFP32Value failed. Expected %v, got %v", test.expected, result)
		}
	}

}

// Following tests were generated by Copilot

func TestFP8E5M2FromFP32Value_PositiveInfinity(t *testing.T) {
	result := FP8E5M2FromFP32Value(float32(math.Inf(1)))
	if result != 0x7C {
		t.Errorf("Expected 0x7C, got %02X", result)
	}
}

func TestFP8E5M2FromFP32Value_NegativeInfinity(t *testing.T) {
	result := FP8E5M2FromFP32Value(float32(math.Inf(-1)))
	if result != 0xFC {
		t.Errorf("Expected 0xFC, got %02X", result)
	}
}

func TestFP8E5M2FromFP32Value_PositiveNormal(t *testing.T) {
	result := FP8E5M2FromFP32Value(1.0)
	if result != 0x3C {
		t.Errorf("Expected 0x48, got %02X", result)
	}
}

func TestFP8E5M2FromFP32Value_NegativeNormal(t *testing.T) {
	result := FP8E5M2FromFP32Value(-1.0)
	if result != 0xBC {
		t.Errorf("Expected 0xC8, got %02X", result)
	}
}

func TestFP8E5M2FromFP32Value_NaN(t *testing.T) {
	result := FP8E5M2FromFP32Value(float32(math.NaN()))
	if result != 0x7F {
		t.Errorf("Expected 0x7F, got %02X", result)
	}
}
