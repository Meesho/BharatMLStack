// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: p2p.proto

package p2p

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Query struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityLabel   string                 `protobuf:"bytes,1,opt,name=entity_label,json=entityLabel,proto3" json:"entity_label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_p2p_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{0}
}

func (x *Query) GetEntityLabel() string {
	if x != nil {
		return x.EntityLabel
	}
	return ""
}

type ClusterTopology struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RingTopology   map[uint32]string      `protobuf:"bytes,1,rep,name=ring_topology,json=ringTopology,proto3" json:"ring_topology,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ClusterMembers map[string]*PodData    `protobuf:"bytes,2,rep,name=cluster_members,json=clusterMembers,proto3" json:"cluster_members,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ClusterTopology) Reset() {
	*x = ClusterTopology{}
	mi := &file_p2p_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterTopology) ProtoMessage() {}

func (x *ClusterTopology) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterTopology.ProtoReflect.Descriptor instead.
func (*ClusterTopology) Descriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterTopology) GetRingTopology() map[uint32]string {
	if x != nil {
		return x.RingTopology
	}
	return nil
}

func (x *ClusterTopology) GetClusterMembers() map[string]*PodData {
	if x != nil {
		return x.ClusterMembers
	}
	return nil
}

type PodData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeIp        string                 `protobuf:"bytes,1,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,omitempty"`
	PodIp         string                 `protobuf:"bytes,2,opt,name=pod_ip,json=podIp,proto3" json:"pod_ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PodData) Reset() {
	*x = PodData{}
	mi := &file_p2p_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodData) ProtoMessage() {}

func (x *PodData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodData.ProtoReflect.Descriptor instead.
func (*PodData) Descriptor() ([]byte, []int) {
	return file_p2p_proto_rawDescGZIP(), []int{2}
}

func (x *PodData) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *PodData) GetPodIp() string {
	if x != nil {
		return x.PodIp
	}
	return ""
}

var File_p2p_proto protoreflect.FileDescriptor

const file_p2p_proto_rawDesc = "" +
	"\n" +
	"\tp2p.proto\x12\x03p2p\"*\n" +
	"\x05Query\x12!\n" +
	"\fentity_label\x18\x01 \x01(\tR\ventityLabel\"\xc3\x02\n" +
	"\x0fClusterTopology\x12K\n" +
	"\rring_topology\x18\x01 \x03(\v2&.p2p.ClusterTopology.RingTopologyEntryR\fringTopology\x12Q\n" +
	"\x0fcluster_members\x18\x02 \x03(\v2(.p2p.ClusterTopology.ClusterMembersEntryR\x0eclusterMembers\x1a?\n" +
	"\x11RingTopologyEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aO\n" +
	"\x13ClusterMembersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\"\n" +
	"\x05value\x18\x02 \x01(\v2\f.p2p.PodDataR\x05value:\x028\x01\"9\n" +
	"\aPodData\x12\x17\n" +
	"\anode_ip\x18\x01 \x01(\tR\x06nodeIp\x12\x15\n" +
	"\x06pod_ip\x18\x02 \x01(\tR\x05podIp2J\n" +
	"\x0fP2PCacheService\x127\n" +
	"\x11GetClusterConfigs\x12\n" +
	".p2p.Query\x1a\x14.p2p.ClusterTopology\"\x00B\bZ\x06../p2pb\x06proto3"

var (
	file_p2p_proto_rawDescOnce sync.Once
	file_p2p_proto_rawDescData []byte
)

func file_p2p_proto_rawDescGZIP() []byte {
	file_p2p_proto_rawDescOnce.Do(func() {
		file_p2p_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_p2p_proto_rawDesc), len(file_p2p_proto_rawDesc)))
	})
	return file_p2p_proto_rawDescData
}

var file_p2p_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_p2p_proto_goTypes = []any{
	(*Query)(nil),           // 0: p2p.Query
	(*ClusterTopology)(nil), // 1: p2p.ClusterTopology
	(*PodData)(nil),         // 2: p2p.PodData
	nil,                     // 3: p2p.ClusterTopology.RingTopologyEntry
	nil,                     // 4: p2p.ClusterTopology.ClusterMembersEntry
}
var file_p2p_proto_depIdxs = []int32{
	3, // 0: p2p.ClusterTopology.ring_topology:type_name -> p2p.ClusterTopology.RingTopologyEntry
	4, // 1: p2p.ClusterTopology.cluster_members:type_name -> p2p.ClusterTopology.ClusterMembersEntry
	2, // 2: p2p.ClusterTopology.ClusterMembersEntry.value:type_name -> p2p.PodData
	0, // 3: p2p.P2PCacheService.GetClusterConfigs:input_type -> p2p.Query
	1, // 4: p2p.P2PCacheService.GetClusterConfigs:output_type -> p2p.ClusterTopology
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_p2p_proto_init() }
func file_p2p_proto_init() {
	if File_p2p_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_p2p_proto_rawDesc), len(file_p2p_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_p2p_proto_goTypes,
		DependencyIndexes: file_p2p_proto_depIdxs,
		MessageInfos:      file_p2p_proto_msgTypes,
	}.Build()
	File_p2p_proto = out.File
	file_p2p_proto_goTypes = nil
	file_p2p_proto_depIdxs = nil
}
